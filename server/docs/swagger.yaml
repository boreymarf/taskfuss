basePath: /api
definitions:
  api.Error:
    description: Common error response structure for API failures
    properties:
      code:
        example: UPPERCASE_CODE
        type: string
      details: {}
      latency:
        example: 42.123Âµs
        type: string
      message:
        example: Brief message about the error.
        type: string
      timestamp:
        example: "2025-07-27T20:32:29+03:00"
        type: string
    type: object
  dto.CreateTaskRequest:
    properties:
      task:
        $ref: '#/definitions/dto.Task'
    type: object
  dto.CreateTaskResponse:
    properties:
      task:
        $ref: '#/definitions/dto.Task'
    type: object
  dto.GetAllTasksResponse:
    properties:
      tasks:
        items:
          $ref: '#/definitions/dto.Task'
        type: array
    type: object
  dto.GetTaskByIDResponse:
    properties:
      task:
        $ref: '#/definitions/dto.Task'
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      auth_token:
        type: string
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.PongResponse:
    description: A simple health check response.
    properties:
      message:
        example: pong
        type: string
    type: object
  dto.ProfileResponse:
    properties:
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 40
        minLength: 8
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.RegisterResponse:
    properties:
      auth_token:
        type: string
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.Requirement:
    properties:
      data_type:
        type: string
      id:
        type: integer
      operands:
        items:
          $ref: '#/definitions/dto.Requirement'
        type: array
      operator:
        type: string
      sort_order:
        type: integer
      target_value:
        type: string
      title:
        type: string
      type:
        type: string
      value:
        type: string
    type: object
  dto.Task:
    properties:
      created_at:
        type: string
      description:
        description: Nullable
        type: string
      end_date:
        description: Nullable
        type: string
      id:
        type: integer
      requirement:
        $ref: '#/definitions/dto.Requirement'
      start_date:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  dto.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
host: localhost:4000
info:
  contact: {}
  description: API for TaskFuss app
  title: TaskFuss API
  version: 1.0.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user credentials and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      summary: User login
      tags:
      - authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account and return a JWT token
      parameters:
      - description: User registration data
        in: body
        name: RegisterRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully registered
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "400":
          description: 'Invalid request format (code: BAD_REQUEST) or username/email
            already exists (code: DUPLICATE_USER)'
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: 'Internal server error (code: INTERNAL_ERROR)'
          schema:
            $ref: '#/definitions/api.Error'
      summary: Register a new user
      tags:
      - authentication
  /ping:
    get:
      description: Returns "pong" if the server is running
      produces:
      - application/json
      responses:
        "200":
          description: Server is running
          schema:
            $ref: '#/definitions/dto.PongResponse'
      summary: Server health check
      tags:
      - service
  /profile:
    get:
      description: Retrieves the authenticated user's profile information
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Profile retrieved successfully
          schema:
            $ref: '#/definitions/dto.ProfileResponse'
        "401":
          description: 'Unauthorized (code: UNAUTHORIZED)'
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: 'Profile not found (code: PROFILE_NOT_FOUND)'
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: 'Internal server error (code: INTERNAL_ERROR)'
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - profile
  /tasks:
    get:
      description: Retrieves tasks based on filter criteria (active/archived/completed)
        and detail level
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Detail level
        enum:
        - minimal
        - standard
        - full
        in: query
        name: detailLevel
        type: string
      - description: 'Include active tasks (default: true)'
        in: query
        name: showActive
        type: boolean
      - description: 'Include archived tasks (default: false)'
        in: query
        name: showArchived
        type: boolean
      - description: 'Include completed tasks (default: true)'
        in: query
        name: showCompleted
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks
          schema:
            $ref: '#/definitions/dto.GetAllTasksResponse'
        "400":
          description: Invalid query parameters
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - ApiKeyAuth: []
      summary: Get all tasks with filtering options
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task for the authenticated user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Task creation data
        in: body
        name: CreateTaskRequest
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTaskRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Task successfully created
          schema:
            $ref: '#/definitions/dto.CreateTaskResponse'
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - ApiKeyAuth: []
      summary: Create a new task
      tags:
      - tasks
  /tasks/{task_id}:
    get:
      description: Retrieves a single task by its unique identifier
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Task ID
        format: uuid
        in: path
        name: task_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task details
          schema:
            $ref: '#/definitions/dto.GetTaskByIDResponse'
        "400":
          description: Invalid task ID format
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a task by ID
      tags:
      - tasks
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
