/* tslint:disable */
/* eslint-disable */
/**
 * TaskFuss API
 * API for TaskFuss app
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiError } from '../models';
// @ts-ignore
import type { DtoCreateTaskRequest } from '../models';
// @ts-ignore
import type { TasksGet200Response } from '../models';
// @ts-ignore
import type { TasksPost201Response } from '../models';
// @ts-ignore
import type { TasksTaskIdGet200Response } from '../models';
/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves tasks based on filter criteria (active/archived/completed) and detail level
         * @summary Get all tasks with filtering options
         * @param {string} authorization Bearer token
         * @param {TasksGetDetailLevelEnum} [detailLevel] Detail level
         * @param {boolean} [showActive] Include active tasks (default: true)
         * @param {boolean} [showArchived] Include archived tasks (default: false)
         * @param {boolean} [showCompleted] Include completed tasks (default: true)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksGet: async (authorization: string, detailLevel?: TasksGetDetailLevelEnum, showActive?: boolean, showArchived?: boolean, showCompleted?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('tasksGet', 'authorization', authorization)
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detailLevel !== undefined) {
                localVarQueryParameter['detailLevel'] = detailLevel;
            }

            if (showActive !== undefined) {
                localVarQueryParameter['showActive'] = showActive;
            }

            if (showArchived !== undefined) {
                localVarQueryParameter['showArchived'] = showArchived;
            }

            if (showCompleted !== undefined) {
                localVarQueryParameter['showCompleted'] = showCompleted;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new task for the authenticated user
         * @summary Create a new task
         * @param {string} authorization Bearer token
         * @param {DtoCreateTaskRequest} createTaskRequest Task creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksPost: async (authorization: string, createTaskRequest: DtoCreateTaskRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('tasksPost', 'authorization', authorization)
            // verify required parameter 'createTaskRequest' is not null or undefined
            assertParamExists('tasksPost', 'createTaskRequest', createTaskRequest)
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTaskRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a single task by its unique identifier
         * @summary Get a task by ID
         * @param {string} authorization Bearer token
         * @param {string} taskId Task ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksTaskIdGet: async (authorization: string, taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('tasksTaskIdGet', 'authorization', authorization)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('tasksTaskIdGet', 'taskId', taskId)
            const localVarPath = `/tasks/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves tasks based on filter criteria (active/archived/completed) and detail level
         * @summary Get all tasks with filtering options
         * @param {string} authorization Bearer token
         * @param {TasksGetDetailLevelEnum} [detailLevel] Detail level
         * @param {boolean} [showActive] Include active tasks (default: true)
         * @param {boolean} [showArchived] Include archived tasks (default: false)
         * @param {boolean} [showCompleted] Include completed tasks (default: true)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksGet(authorization: string, detailLevel?: TasksGetDetailLevelEnum, showActive?: boolean, showArchived?: boolean, showCompleted?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksGet(authorization, detailLevel, showActive, showArchived, showCompleted, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.tasksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new task for the authenticated user
         * @summary Create a new task
         * @param {string} authorization Bearer token
         * @param {DtoCreateTaskRequest} createTaskRequest Task creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksPost(authorization: string, createTaskRequest: DtoCreateTaskRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksPost(authorization, createTaskRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.tasksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a single task by its unique identifier
         * @summary Get a task by ID
         * @param {string} authorization Bearer token
         * @param {string} taskId Task ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tasksTaskIdGet(authorization: string, taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksTaskIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tasksTaskIdGet(authorization, taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.tasksTaskIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * Retrieves tasks based on filter criteria (active/archived/completed) and detail level
         * @summary Get all tasks with filtering options
         * @param {TasksApiTasksGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksGet(requestParameters: TasksApiTasksGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TasksGet200Response> {
            return localVarFp.tasksGet(requestParameters.authorization, requestParameters.detailLevel, requestParameters.showActive, requestParameters.showArchived, requestParameters.showCompleted, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new task for the authenticated user
         * @summary Create a new task
         * @param {TasksApiTasksPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksPost(requestParameters: TasksApiTasksPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TasksPost201Response> {
            return localVarFp.tasksPost(requestParameters.authorization, requestParameters.createTaskRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a single task by its unique identifier
         * @summary Get a task by ID
         * @param {TasksApiTasksTaskIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tasksTaskIdGet(requestParameters: TasksApiTasksTaskIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TasksTaskIdGet200Response> {
            return localVarFp.tasksTaskIdGet(requestParameters.authorization, requestParameters.taskId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TasksApi - interface
 * @export
 * @interface TasksApi
 */
export interface TasksApiInterface {
    /**
     * Retrieves tasks based on filter criteria (active/archived/completed) and detail level
     * @summary Get all tasks with filtering options
     * @param {TasksApiTasksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    tasksGet(requestParameters: TasksApiTasksGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TasksGet200Response>;

    /**
     * Create a new task for the authenticated user
     * @summary Create a new task
     * @param {TasksApiTasksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    tasksPost(requestParameters: TasksApiTasksPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TasksPost201Response>;

    /**
     * Retrieves a single task by its unique identifier
     * @summary Get a task by ID
     * @param {TasksApiTasksTaskIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiInterface
     */
    tasksTaskIdGet(requestParameters: TasksApiTasksTaskIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TasksTaskIdGet200Response>;

}

/**
 * Request parameters for tasksGet operation in TasksApi.
 * @export
 * @interface TasksApiTasksGetRequest
 */
export interface TasksApiTasksGetRequest {
    /**
     * Bearer token
     * @type {string}
     * @memberof TasksApiTasksGet
     */
    readonly authorization: string

    /**
     * Detail level
     * @type {'minimal' | 'standard' | 'full'}
     * @memberof TasksApiTasksGet
     */
    readonly detailLevel?: TasksGetDetailLevelEnum

    /**
     * Include active tasks (default: true)
     * @type {boolean}
     * @memberof TasksApiTasksGet
     */
    readonly showActive?: boolean

    /**
     * Include archived tasks (default: false)
     * @type {boolean}
     * @memberof TasksApiTasksGet
     */
    readonly showArchived?: boolean

    /**
     * Include completed tasks (default: true)
     * @type {boolean}
     * @memberof TasksApiTasksGet
     */
    readonly showCompleted?: boolean
}

/**
 * Request parameters for tasksPost operation in TasksApi.
 * @export
 * @interface TasksApiTasksPostRequest
 */
export interface TasksApiTasksPostRequest {
    /**
     * Bearer token
     * @type {string}
     * @memberof TasksApiTasksPost
     */
    readonly authorization: string

    /**
     * Task creation data
     * @type {DtoCreateTaskRequest}
     * @memberof TasksApiTasksPost
     */
    readonly createTaskRequest: DtoCreateTaskRequest
}

/**
 * Request parameters for tasksTaskIdGet operation in TasksApi.
 * @export
 * @interface TasksApiTasksTaskIdGetRequest
 */
export interface TasksApiTasksTaskIdGetRequest {
    /**
     * Bearer token
     * @type {string}
     * @memberof TasksApiTasksTaskIdGet
     */
    readonly authorization: string

    /**
     * Task ID
     * @type {string}
     * @memberof TasksApiTasksTaskIdGet
     */
    readonly taskId: string
}

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI implements TasksApiInterface {
    /**
     * Retrieves tasks based on filter criteria (active/archived/completed) and detail level
     * @summary Get all tasks with filtering options
     * @param {TasksApiTasksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public tasksGet(requestParameters: TasksApiTasksGetRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).tasksGet(requestParameters.authorization, requestParameters.detailLevel, requestParameters.showActive, requestParameters.showArchived, requestParameters.showCompleted, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new task for the authenticated user
     * @summary Create a new task
     * @param {TasksApiTasksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public tasksPost(requestParameters: TasksApiTasksPostRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).tasksPost(requestParameters.authorization, requestParameters.createTaskRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a single task by its unique identifier
     * @summary Get a task by ID
     * @param {TasksApiTasksTaskIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public tasksTaskIdGet(requestParameters: TasksApiTasksTaskIdGetRequest, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).tasksTaskIdGet(requestParameters.authorization, requestParameters.taskId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
  * @export
  * @enum {string}
  */
export enum TasksGetDetailLevelEnum {
    MINIMAL = 'minimal',
    STANDARD = 'standard',
    FULL = 'full'
}
